// Code generated by go-swagger; DO NOT EDIT.

package service_plugin_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"revocation-grpc-plugin-server-go-cli/pkg/client/platformservice/openapi2/models"
)

// UpdateLootBoxPluginConfig1Reader is a Reader for the UpdateLootBoxPluginConfig1 structure.
type UpdateLootBoxPluginConfig1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLootBoxPluginConfig1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateLootBoxPluginConfig1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewUpdateLootBoxPluginConfig1UnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateLootBoxPluginConfig1OK creates a UpdateLootBoxPluginConfig1OK with default headers values
func NewUpdateLootBoxPluginConfig1OK() *UpdateLootBoxPluginConfig1OK {
	return &UpdateLootBoxPluginConfig1OK{}
}

/*
UpdateLootBoxPluginConfig1OK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateLootBoxPluginConfig1OK struct {
	Payload *models.RevocationPluginConfigInfo
}

// IsSuccess returns true when this update loot box plugin config1 o k response has a 2xx status code
func (o *UpdateLootBoxPluginConfig1OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update loot box plugin config1 o k response has a 3xx status code
func (o *UpdateLootBoxPluginConfig1OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update loot box plugin config1 o k response has a 4xx status code
func (o *UpdateLootBoxPluginConfig1OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update loot box plugin config1 o k response has a 5xx status code
func (o *UpdateLootBoxPluginConfig1OK) IsServerError() bool {
	return false
}

// IsCode returns true when this update loot box plugin config1 o k response a status code equal to that given
func (o *UpdateLootBoxPluginConfig1OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update loot box plugin config1 o k response
func (o *UpdateLootBoxPluginConfig1OK) Code() int {
	return 200
}

func (o *UpdateLootBoxPluginConfig1OK) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/revocation/plugins/revocation][%d] updateLootBoxPluginConfig1OK  %+v", 200, o.Payload)
}

func (o *UpdateLootBoxPluginConfig1OK) String() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/revocation/plugins/revocation][%d] updateLootBoxPluginConfig1OK  %+v", 200, o.Payload)
}

func (o *UpdateLootBoxPluginConfig1OK) GetPayload() *models.RevocationPluginConfigInfo {
	return o.Payload
}

func (o *UpdateLootBoxPluginConfig1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RevocationPluginConfigInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLootBoxPluginConfig1UnprocessableEntity creates a UpdateLootBoxPluginConfig1UnprocessableEntity with default headers values
func NewUpdateLootBoxPluginConfig1UnprocessableEntity() *UpdateLootBoxPluginConfig1UnprocessableEntity {
	return &UpdateLootBoxPluginConfig1UnprocessableEntity{}
}

/*
UpdateLootBoxPluginConfig1UnprocessableEntity describes a response with status code 422, with default header values.

<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type UpdateLootBoxPluginConfig1UnprocessableEntity struct {
	Payload *models.ValidationErrorEntity
}

// IsSuccess returns true when this update loot box plugin config1 unprocessable entity response has a 2xx status code
func (o *UpdateLootBoxPluginConfig1UnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update loot box plugin config1 unprocessable entity response has a 3xx status code
func (o *UpdateLootBoxPluginConfig1UnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update loot box plugin config1 unprocessable entity response has a 4xx status code
func (o *UpdateLootBoxPluginConfig1UnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update loot box plugin config1 unprocessable entity response has a 5xx status code
func (o *UpdateLootBoxPluginConfig1UnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update loot box plugin config1 unprocessable entity response a status code equal to that given
func (o *UpdateLootBoxPluginConfig1UnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update loot box plugin config1 unprocessable entity response
func (o *UpdateLootBoxPluginConfig1UnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateLootBoxPluginConfig1UnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/revocation/plugins/revocation][%d] updateLootBoxPluginConfig1UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateLootBoxPluginConfig1UnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/revocation/plugins/revocation][%d] updateLootBoxPluginConfig1UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateLootBoxPluginConfig1UnprocessableEntity) GetPayload() *models.ValidationErrorEntity {
	return o.Payload
}

func (o *UpdateLootBoxPluginConfig1UnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
