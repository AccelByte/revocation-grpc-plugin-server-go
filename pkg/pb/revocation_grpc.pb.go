// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: revocation.proto

package revocation_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RevocationClient is the client API for Revocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RevocationClient interface {
	// *
	// Revoke
	// Currently, only Third-Party DLC Refund and Refund Order will trigger this grpc revocation.
	Revoke(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error)
}

type revocationClient struct {
	cc grpc.ClientConnInterface
}

func NewRevocationClient(cc grpc.ClientConnInterface) RevocationClient {
	return &revocationClient{cc}
}

func (c *revocationClient) Revoke(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error) {
	out := new(RevokeResponse)
	err := c.cc.Invoke(ctx, "/accelbyte.platform.revocation.v1.Revocation/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RevocationServer is the server API for Revocation service.
// All implementations must embed UnimplementedRevocationServer
// for forward compatibility
type RevocationServer interface {
	// *
	// Revoke
	// Currently, only Third-Party DLC Refund and Refund Order will trigger this grpc revocation.
	Revoke(context.Context, *RevokeRequest) (*RevokeResponse, error)
	mustEmbedUnimplementedRevocationServer()
}

// UnimplementedRevocationServer must be embedded to have forward compatible implementations.
type UnimplementedRevocationServer struct {
}

func (UnimplementedRevocationServer) Revoke(context.Context, *RevokeRequest) (*RevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (UnimplementedRevocationServer) mustEmbedUnimplementedRevocationServer() {}

// UnsafeRevocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RevocationServer will
// result in compilation errors.
type UnsafeRevocationServer interface {
	mustEmbedUnimplementedRevocationServer()
}

func RegisterRevocationServer(s grpc.ServiceRegistrar, srv RevocationServer) {
	s.RegisterService(&Revocation_ServiceDesc, srv)
}

func _Revocation_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevocationServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.platform.revocation.v1.Revocation/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevocationServer).Revoke(ctx, req.(*RevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Revocation_ServiceDesc is the grpc.ServiceDesc for Revocation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Revocation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.platform.revocation.v1.Revocation",
	HandlerType: (*RevocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Revoke",
			Handler:    _Revocation_Revoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "revocation.proto",
}
